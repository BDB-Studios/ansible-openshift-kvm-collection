<domain type='kvm' xmlns:qemu='http://libvirt.org/schemas/domain/qemu/1.0'>
  <name>{{ vm_instance_name }}</name>
  <uuid>{{ lookup('lines','uuidgen') }}</uuid>
  <metadata>
    <kvirt:info xmlns:kvirt="kvirt">
      <kvirt:profile>kvirt</kvirt:profile>
      <kvirt:plan>{{ dns.clusterid }}</kvirt:plan>
    </kvirt:info>
  </metadata>
  <memory unit='{{ vm_memory_unit }}'>{{ vm_memory_size }}</memory>
  <currentMemory unit='{{ vm_memory_unit }}'>{{ vm_memory_size }}</currentMemory>
  <vcpu>{{ vm_vcpu }}</vcpu>
  <iothreads>1</iothreads>
  <os>
    <type arch="x86_64">hvm</type>
  </os>
  <features>
    <acpi/>
    <apic/>
    <pae/>
  </features>
  <clock offset="utc">
    <timer name="rtc" tickpolicy="catchup"/>
    <timer name="pit" tickpolicy="delay"/>
    <timer name="hpet" present="no"/>
  </clock>
  <pm>
    <suspend-to-mem enabled="no"/>
    <suspend-to-disk enabled="no"/>
  </pm>
  <devices>
    <emulator>{{ create_nodes_qemu_path }}</emulator>
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2' iothread="1" io="{{ iothread_type }}"/>
      <source file='/var/lib/libvirt/images/{{ vm_instance_name }}.qcow2'/>
      <target dev='vda' bus='virtio'/>
      <boot order="1" />
    </disk>
    {% if vm_extra_disks is defined %}
    {% for extra_disk in vm_extra_disks %}
    <disk type='file' device='disk'>
      <driver name='qemu' type='qcow2'/>
      <source file='/var/lib/libvirt/images/{{ vm_instance_name }}-{{ extra_disk.device }}.qcow2' />
      <backingStore/>
      <target dev='{{ extra_disk.device }}' bus='virtio'/>
    </disk>
    {% endfor %}
    {% endif %}
    <controller type="usb" index="0" model="ich9-ehci1"/>
    <controller type="usb" index="0" model="ich9-uhci1">
      <master startport="0"/>
    </controller>
    <controller type="usb" index="0" model="ich9-uhci2">
      <master startport="2"/>
    </controller>
    <controller type="usb" index="0" model="ich9-uhci3">
      <master startport="4"/>
    </controller>
    {% if use_bridge is defined and use_bridge %}
    <interface type='bridge'>
      <mac address='{{ vm_mac_address  }}'/>
      <source bridge='{{ network_bridge_name }}'/>
      <model type='virtio'/>
      <boot order="2" />
      <alias name="net0" />
    </interface>
    {% else %}
    <interface type='network'>
      <mac address='{{ vm_mac_address  }}'/>
      <source network='{{ vm_network }}'/>
      <model type='virtio'/>
      <boot order="2" />
    </interface>
    {% endif %}
    {% if use_bonded_network %}
    <interface type='network'>
      <mac address='{{ "52:54:00" | community.general.random_mac(seed=vm_mac_address) }}'/>
      <source network='{{ vm_network }}'/>
      <model type='virtio'/>
    </interface>
    {% endif %}
    <graphics type="vnc" port="-1"/>
    <console type="pty"/>
    <rng model="virtio">
      <backend model="random">/dev/urandom</backend>
    </rng>
  </devices>
</domain>
